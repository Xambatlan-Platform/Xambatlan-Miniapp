openapi: 3.1.0
info:
  title: Xambatlán API
  description: Trust-ranking Mini App API for service providers and clients
  version: 0.1.0
  contact:
    name: Xambatlán Team
  license:
    name: MIT

servers:
  - url: http://localhost:3001
    description: Development server
  - url: https://api.xambitlan.world
    description: Production server

paths:
  # Authentication
  /auth/verify:
    post:
      summary: Verify World ID proof
      description: Verify World ID proof and create/authenticate user
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyProofRequest'
      responses:
        '200':
          description: Verification successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid proof
        '401':
          description: Verification failed

  # Profiles
  /profiles:
    post:
      summary: Create user profile
      description: Create a new user profile (provider or client)
      tags: [Profiles]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProfileRequest'
      responses:
        '201':
          description: Profile created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
    get:
      summary: Get user profiles
      description: Get profiles with optional filtering
      tags: [Profiles]
      parameters:
        - name: type
          in: query
          schema:
            type: string
            enum: [provider, client]
        - name: category
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: Profiles retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  profiles:
                    type: array
                    items:
                      $ref: '#/components/schemas/PublicProfile'
                  total:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer

  /profiles/{id}:
    get:
      summary: Get profile by ID
      description: Get a specific profile by ID
      tags: [Profiles]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Profile found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicProfile'
        '404':
          description: Profile not found

  /profiles/me:
    get:
      summary: Get current user profile
      description: Get the authenticated user's profile
      tags: [Profiles]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Profile retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
    put:
      summary: Update current user profile
      description: Update the authenticated user's profile
      tags: [Profiles]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'

  # Services
  /services:
    post:
      summary: Create service
      description: Create a new service offering
      tags: [Services]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateServiceRequest'
      responses:
        '201':
          description: Service created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
    get:
      summary: List services
      description: Get services with filtering and pagination
      tags: [Services]
      parameters:
        - name: category
          in: query
          schema:
            type: string
        - name: minRating
          in: query
          schema:
            type: number
            minimum: 0
            maximum: 5
        - name: area
          in: query
          schema:
            type: string
        - name: priceMin
          in: query
          schema:
            type: number
            minimum: 0
        - name: priceMax
          in: query
          schema:
            type: number
            minimum: 0
        - name: available
          in: query
          schema:
            type: boolean
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: Services retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  services:
                    type: array
                    items:
                      $ref: '#/components/schemas/ServiceWithProvider'
                  total:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer

  /services/{id}:
    get:
      summary: Get service by ID
      description: Get a specific service by ID
      tags: [Services]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Service found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceWithProvider'
        '404':
          description: Service not found
    put:
      summary: Update service
      description: Update a service (owner only)
      tags: [Services]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateServiceRequest'
      responses:
        '200':
          description: Service updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '403':
          description: Not authorized to update this service
        '404':
          description: Service not found
    delete:
      summary: Delete service
      description: Delete a service (owner only)
      tags: [Services]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Service deleted successfully
        '403':
          description: Not authorized to delete this service
        '404':
          description: Service not found

  # Pay-to-Reveal Flow
  /reveal/{serviceId}/request:
    post:
      summary: Request contact reveal
      description: Request to reveal service provider's contact information
      tags: [Reveal]
      security:
        - bearerAuth: []
      parameters:
        - name: serviceId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RevealRequest'
      responses:
        '201':
          description: Reveal request created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevealRequestResponse'
        '400':
          description: Invalid request
        '402':
          description: Payment required
        '404':
          description: Service not found

  /reveal/{requestId}/consent:
    post:
      summary: Provider consent to reveal
      description: Provider gives consent to reveal contact information
      tags: [Reveal]
      security:
        - bearerAuth: []
      parameters:
        - name: requestId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConsentRequest'
      responses:
        '200':
          description: Consent recorded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentResponse'
        '403':
          description: Not authorized
        '404':
          description: Reveal request not found

  /reveal/{requestId}/contact:
    get:
      summary: Get revealed contact
      description: Get the revealed contact information (time-boxed access)
      tags: [Reveal]
      security:
        - bearerAuth: []
      parameters:
        - name: requestId
          in: path
          required: true
          schema:
            type: string
        - name: token
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Contact information revealed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactInfo'
        '401':
          description: Invalid or expired token
        '403':
          description: Not authorized
        '404':
          description: Reveal request not found

  # Deals
  /deals:
    post:
      summary: Create deal
      description: Create a new deal (on-chain or off-chain)
      tags: [Deals]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDealRequest'
      responses:
        '201':
          description: Deal created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deal'
    get:
      summary: List deals
      description: Get deals for the authenticated user
      tags: [Deals]
      security:
        - bearerAuth: []
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, active, completed, cancelled, disputed]
        - name: role
          in: query
          schema:
            type: string
            enum: [client, provider]
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: Deals retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  deals:
                    type: array
                    items:
                      $ref: '#/components/schemas/DealWithParticipants'
                  total:
                    type: integer

  /deals/{id}:
    get:
      summary: Get deal by ID
      description: Get a specific deal by ID
      tags: [Deals]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Deal found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DealWithParticipants'
        '403':
          description: Not authorized to view this deal
        '404':
          description: Deal not found

  /deals/{id}/release:
    post:
      summary: Release deal funds
      description: Release escrowed funds (client or mutual confirmation)
      tags: [Deals]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReleaseFundsRequest'
      responses:
        '200':
          description: Funds released successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deal'
        '403':
          description: Not authorized
        '404':
          description: Deal not found

  /deals/{id}/cancel:
    post:
      summary: Cancel deal
      description: Cancel a deal (before completion)
      tags: [Deals]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelDealRequest'
      responses:
        '200':
          description: Deal cancelled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deal'
        '403':
          description: Not authorized
        '404':
          description: Deal not found

  # Reviews
  /reviews:
    post:
      summary: Submit review
      description: Submit a review after deal completion
      tags: [Reviews]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateReviewRequest'
      responses:
        '201':
          description: Review submitted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '400':
          description: Invalid review data
        '403':
          description: Not authorized to review this deal

  /reviews/{profileId}:
    get:
      summary: Get reviews for profile
      description: Get reviews for a specific profile
      tags: [Reviews]
      parameters:
        - name: profileId
          in: path
          required: true
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 10
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: Reviews retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  reviews:
                    type: array
                    items:
                      $ref: '#/components/schemas/ReviewWithReviewer'
                  total:
                    type: integer
                  averageRating:
                    type: number
                  ratingDistribution:
                    type: object
                    properties:
                      '1': { type: integer }
                      '2': { type: integer }
                      '3': { type: integer }
                      '4': { type: integer }
                      '5': { type: integer }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Authentication
    VerifyProofRequest:
      type: object
      required: [proof, nullifier_hash, merkle_root, verification_level, action, signal]
      properties:
        proof:
          type: string
          description: Zero-knowledge proof
        nullifier_hash:
          type: string
          description: Unique identifier for this proof
        merkle_root:
          type: string
          description: Merkle root of the World ID tree
        verification_level:
          type: string
          enum: [orb, device]
        action:
          type: string
          description: Action identifier
        signal:
          type: string
          description: Signal for the proof

    AuthResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT token
        user:
          $ref: '#/components/schemas/User'
        isNewUser:
          type: boolean

    # User & Profile
    User:
      type: object
      properties:
        id:
          type: string
        worldIdHash:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Profile:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        type:
          type: string
          enum: [provider, client]
        username:
          type: string
        avatarUrl:
          type: string
          nullable: true
        avatarEmoji:
          type: string
          nullable: true
        bio:
          type: string
          nullable: true
        contactHash:
          type: string
          description: Hash of encrypted contact data
        sbtTokenId:
          type: string
          nullable: true
        reputationScore:
          type: number
          minimum: 0
          maximum: 5
        totalReviews:
          type: integer
        services:
          type: array
          items:
            $ref: '#/components/schemas/Service'
        badges:
          type: array
          items:
            $ref: '#/components/schemas/Badge'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    PublicProfile:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
          enum: [provider, client]
        username:
          type: string
        avatarUrl:
          type: string
          nullable: true
        avatarEmoji:
          type: string
          nullable: true
        bio:
          type: string
          nullable: true
        contactHash:
          type: string
          description: Hash of encrypted contact data (for verification)
        reputationScore:
          type: number
          minimum: 0
          maximum: 5
        totalReviews:
          type: integer
        badges:
          type: array
          items:
            $ref: '#/components/schemas/Badge'
        createdAt:
          type: string
          format: date-time

    CreateProfileRequest:
      type: object
      required: [type, username]
      properties:
        type:
          type: string
          enum: [provider, client]
        username:
          type: string
          minLength: 3
          maxLength: 30
        avatarUrl:
          type: string
          nullable: true
        avatarEmoji:
          type: string
          nullable: true
        bio:
          type: string
          maxLength: 500
        contactInfo:
          $ref: '#/components/schemas/ContactInfo'

    UpdateProfileRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 30
        avatarUrl:
          type: string
          nullable: true
        avatarEmoji:
          type: string
          nullable: true
        bio:
          type: string
          maxLength: 500
        contactInfo:
          $ref: '#/components/schemas/ContactInfo'

    ContactInfo:
      type: object
      properties:
        whatsapp:
          type: string
          nullable: true
        website:
          type: string
          nullable: true
        facebook:
          type: string
          nullable: true
        instagram:
          type: string
          nullable: true
        email:
          type: string
          nullable: true

    # Services
    Service:
      type: object
      properties:
        id:
          type: string
        ownerId:
          type: string
        category:
          type: string
        title:
          type: string
        description:
          type: string
        priceModel:
          type: string
          enum: [hourly, fixed, negotiable]
        price:
          type: number
          nullable: true
        currency:
          type: string
          default: USDC
        availability:
          type: array
          items:
            $ref: '#/components/schemas/AvailabilitySlot'
        ipfsCid:
          type: string
          nullable: true
        active:
          type: boolean
          default: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ServiceWithProvider:
      allOf:
        - $ref: '#/components/schemas/Service'
        - type: object
          properties:
            provider:
              $ref: '#/components/schemas/PublicProfile'

    CreateServiceRequest:
      type: object
      required: [category, title, description, priceModel]
      properties:
        category:
          type: string
        title:
          type: string
          minLength: 5
          maxLength: 100
        description:
          type: string
          minLength: 20
          maxLength: 1000
        priceModel:
          type: string
          enum: [hourly, fixed, negotiable]
        price:
          type: number
          minimum: 0
        currency:
          type: string
          default: USDC
        availability:
          type: array
          items:
            $ref: '#/components/schemas/AvailabilitySlot'

    UpdateServiceRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 5
          maxLength: 100
        description:
          type: string
          minLength: 20
          maxLength: 1000
        priceModel:
          type: string
          enum: [hourly, fixed, negotiable]
        price:
          type: number
          minimum: 0
        availability:
          type: array
          items:
            $ref: '#/components/schemas/AvailabilitySlot'
        active:
          type: boolean

    AvailabilitySlot:
      type: object
      required: [dayOfWeek, startTime, endTime]
      properties:
        dayOfWeek:
          type: integer
          minimum: 0
          maximum: 6
          description: 0 = Sunday, 6 = Saturday
        startTime:
          type: string
          pattern: '^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$'
          description: Time in HH:MM format
        endTime:
          type: string
          pattern: '^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$'
          description: Time in HH:MM format
        timezone:
          type: string
          description: IANA timezone identifier
          default: UTC

    # Reveal Flow
    RevealRequest:
      type: object
      required: [paymentProof]
      properties:
        paymentProof:
          type: string
          description: Proof of payment transaction
        message:
          type: string
          maxLength: 500
          description: Optional message to provider

    RevealRequestResponse:
      type: object
      properties:
        id:
          type: string
        serviceId:
          type: string
        clientId:
          type: string
        status:
          type: string
          enum: [pending, approved, denied, expired]
        paymentRef:
          type: string
        expiresAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time

    ConsentRequest:
      type: object
      required: [signature, signedMessage]
      properties:
        signature:
          type: string
          description: Cryptographic signature of consent
        signedMessage:
          type: string
          description: Typed data that was signed
        consent:
          type: boolean
          description: true to approve, false to deny

    ConsentResponse:
      type: object
      properties:
        status:
          type: string
          enum: [approved, denied]
        accessToken:
          type: string
          nullable: true
          description: Time-boxed access token (only if approved)
        expiresAt:
          type: string
          format: date-time
          nullable: true

    # Deals
    Deal:
      type: object
      properties:
        id:
          type: string
        serviceId:
          type: string
        clientId:
          type: string
        providerId:
          type: string
        onChain:
          type: boolean
        escrowTx:
          type: string
          nullable: true
        amount:
          type: number
          nullable: true
        currency:
          type: string
          nullable: true
        status:
          type: string
          enum: [pending, active, completed, cancelled, disputed]
        agreementHash:
          type: string
          nullable: true
          description: Hash of off-chain agreement
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        completedAt:
          type: string
          format: date-time
          nullable: true

    DealWithParticipants:
      allOf:
        - $ref: '#/components/schemas/Deal'
        - type: object
          properties:
            service:
              $ref: '#/components/schemas/Service'
            client:
              $ref: '#/components/schemas/PublicProfile'
            provider:
              $ref: '#/components/schemas/PublicProfile'

    CreateDealRequest:
      type: object
      required: [serviceId, onChain]
      properties:
        serviceId:
          type: string
        onChain:
          type: boolean
        amount:
          type: number
          minimum: 0
        currency:
          type: string
          default: USDC
        agreementHash:
          type: string
          nullable: true
          description: Hash of off-chain agreement terms

    ReleaseFundsRequest:
      type: object
      properties:
        transactionHash:
          type: string
          nullable: true
          description: Transaction hash for on-chain release

    CancelDealRequest:
      type: object
      properties:
        reason:
          type: string
          maxLength: 500
        refundClient:
          type: boolean
          default: true

    # Reviews
    Review:
      type: object
      properties:
        id:
          type: string
        dealId:
          type: string
        fromUserId:
          type: string
        toUserId:
          type: string
        rating:
          type: integer
          minimum: 1
          maximum: 5
        text:
          type: string
          maxLength: 1000
        attestationRef:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time

    ReviewWithReviewer:
      allOf:
        - $ref: '#/components/schemas/Review'
        - type: object
          properties:
            reviewer:
              $ref: '#/components/schemas/PublicProfile'

    CreateReviewRequest:
      type: object
      required: [dealId, toUserId, rating]
      properties:
        dealId:
          type: string
        toUserId:
          type: string
        rating:
          type: integer
          minimum: 1
          maximum: 5
        text:
          type: string
          maxLength: 1000

    # Badges
    Badge:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        kind:
          type: string
          enum: [verified_provider, top_rated, quick_responder, reliable, newcomer]
        title:
          type: string
        description:
          type: string
        iconUrl:
          type: string
          nullable: true
        awardedAt:
          type: string
          format: date-time

    # Common
    Error:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        details:
          type: object
          nullable: true

tags:
  - name: Authentication
    description: World ID authentication and user management
  - name: Profiles
    description: User profile management
  - name: Services
    description: Service listings and management
  - name: Reveal
    description: Pay-to-reveal contact information flow
  - name: Deals
    description: On-chain and off-chain deal management
  - name: Reviews
    description: Review and reputation system